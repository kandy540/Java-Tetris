package edu.vt.cs5044;

import edu.vt.cs5044.tetris.AI;
import edu.vt.cs5044.tetris.Board;
import edu.vt.cs5044.tetris.Placement;
import edu.vt.cs5044.tetris.Rotation;
import edu.vt.cs5044.tetris.Shape;

/**
 * 
 * This class has private instances, helpers, and public methods 
 * for the AI interface implementation
 *
 * @author Andy Kim
 * @version 2021.09.05
 *
 */
public class TetrisAI implements AI {
    
    /**
     * Find the best placement.
     *
     * @param currentBoard current game board
     * @param shape current shape
     * @return the best placement
     */
    @Override
    public Placement findBestPlacement(Board currentBoard, Shape shape) {
        int overallCost = Integer.MAX_VALUE;
        int tempCost = 0;
        Placement tempPlacement;
        Placement bestPlacement = new Placement(Rotation.NONE, 0);
        for (int col = 0; col < Board.WIDTH; col++) {
            for (Rotation rotation : shape.getValidRotationSet())   {
                int availableWidth = Board.WIDTH - col;
                if (shape.getWidth(rotation) <= availableWidth) {
                    tempPlacement = new Placement(rotation, col);
                    Board tempBoard = currentBoard.getResultBoard(shape, tempPlacement);
                    tempCost = 6 * getAverageColumnHeight(tempBoard)
                            + 3 * getColumnHeightRange(tempBoard)
                            + 0 * getColumnHeightVariance(tempBoard)
                            + 9 * getTotalGapCount(tempBoard);
                    if (tempCost < overallCost) {
                        overallCost = tempCost;
                        bestPlacement = tempPlacement;
                    }
                }
            }
        }
        return bestPlacement;
    }
    
    /**
     * Get the average column height.
     *
     * @param board current game board
     * @return the sum of height divided by board width
     */
    @Override
    public int getAverageColumnHeight(Board board)  {
        int heightSum = 0;
        for (int col = 0; col < Board.WIDTH; col++) {
            heightSum += getColumnHeight(board, col);
        }

        return heightSum / Board.WIDTH;
    }

    /**
     * Get the average column height range.
     *
     * @param board current game board
     * @return the tallest height minus shortest height
     */
    @Override
    public int getColumnHeightRange(Board board)    {
        int tallestHeight = Integer.MIN_VALUE;
        int shortestHeight = Integer.MAX_VALUE;
        for (int col = 0; col < Board.WIDTH; col++) {
            tallestHeight = Math.max(tallestHeight, getColumnHeight(board, col));
            shortestHeight = Math.min(shortestHeight, getColumnHeight(board, col));
        }

        return tallestHeight - shortestHeight;
    }

    /**
     * Get the average column height range.
     *
     * @param board current game board
     * @return the variance of column height
     */
    @Override
    public int getColumnHeightVariance(Board board) {
        int variance = 0;
        for (int col = 0; col < Board.WIDTH - 1; col++) {
            variance += Math.abs(getColumnHeight(board, col) - getColumnHeight(board, col + 1));
        }

        return variance;
    }

    /**
     * Get the total gap count.
     *
     * @param board current game board
     * @return the total gap or gap count
     */
    @Override
    public int getTotalGapCount(Board board)    {
        int gapCount = 0;
        for (int col = 0; col < Board.WIDTH; col++) {
            gapCount += getColumnHeight(board, col) - getColumnBlockCount(board, col);
        }

        return gapCount;
    }

    /**
     * Get the height of the current column.
     *
     * @param board current game board
     * @param col requested column
     * @return the requested column's height
     */
    private int getColumnHeight(Board board, int col)   {
        boolean[] colBlocks = board.getFixedBlocks()[col];
        for (int row = Board.HEIGHT - 1; row >= 0; row--)   {
            if (colBlocks[row]) {
                return row + 1;
            }
        }

        return 0;
    }

    /**
     * Get the block count of the current column.
     *
     * @param board current game board
     * @param col requested column
     * @return the requested columns's block count
     */
    private int getColumnBlockCount(Board board, int col)   {
        int blockCount = 0;
        boolean[] colBlocks = board.getFixedBlocks()[col];
        for (int row = 0; row < Board.HEIGHT; row++)    {
            if (colBlocks[row]) {
                blockCount++;
            }
        }

        return blockCount;
    }
    
}
